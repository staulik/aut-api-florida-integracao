pm.test("Status code is 400", function () {
    pm.response.to.have.status(400);
});

pm.test("A resposta é valida e deve ter um corpo", function () {
    pm.response.to.be.badRequest;
     pm.response.to.be.withBody;
     pm.response.to.be.json;
});

pm.test("Validar valores permitidos para o campo 'idTipoTelefone'", function () {
    var responseJson = pm.response.json();
    var errors = responseJson.errors;

    pm.expect(errors).to.be.an('array').that.is.not.empty;
    pm.expect(errors[1].schemaPath).to.equal('#/properties/telefones/items/properties/idTipoTelefone/enum');
    pm.expect(errors[1].params.allowedValues).to.eql([2, 1, 3]);
});

pm.test("Validar padrão do campo 'telefone'", function () {
    var responseJson = pm.response.json();
    var errors = responseJson.errors;

    pm.expect(errors).to.be.an('array').that.is.not.empty;
    pm.expect(errors[0].schemaPath).to.equal('#/properties/telefones/items/else/properties/telefone/pattern');
    pm.expect(errors[0].params.pattern).to.equal('^[0-9]{8}$');
});

pm.test("Verificar se a lista 'telefones' contém pelo menos um item válido", function () {
    var responseJson = pm.response.json();
    var errors = responseJson.errors;

    pm.expect(errors).to.be.an('array').that.is.not.empty;
    pm.expect(errors[3].schemaPath).to.equal('#/properties/telefones/contains');
    pm.expect(errors[3].params.minContains).to.equal(1);
});

pm.test("Validar valor constante do campo 'idTipoTelefone'", function () {
    var responseJson = pm.response.json();
    var errors = responseJson.errors;

    pm.expect(errors).to.be.an('array').that.is.not.empty;
    pm.expect(errors[2].schemaPath).to.equal('#/properties/telefones/contains/properties/idTipoTelefone/const');
    pm.expect(errors[2].params.allowedValue).to.equal(3);
});